"use strict";var De=Object.create;var me=Object.defineProperty;var Se=Object.getOwnPropertyDescriptor;var ke=Object.getOwnPropertyNames;var Re=Object.getPrototypeOf,Oe=Object.prototype.hasOwnProperty;var _e=(t,e,r,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of ke(e))!Oe.call(t,o)&&o!==r&&me(t,o,{get:()=>e[o],enumerable:!(i=Se(e,o))||i.enumerable});return t};var Ne=(t,e,r)=>(r=t!=null?De(Re(t)):{},_e(e||!t||!t.__esModule?me(r,"default",{value:t,enumerable:!0}):r,t));var te=require("discord.js");var ce=Ne(require("dotenv"));ce.default.config();var{DISCORD_TOKEN:pe,DISCORD_CLIENT_ID:le,GUILD_ID:Be,APP_ENV:Me}=process.env;if(!pe||!le)throw new Error("Missing environment variables");var d={DISCORD_TOKEN:pe,DISCORD_CLIENT_ID:le,GUILD_ID:Be,APP_ENV:Me};var x=require("sequelize");var ue=require("sequelize"),b=new ue.Sequelize("database","username","password",{host:"localhost",dialect:"sqlite",logging:!1,storage:"database.sqlite"});var I=(i=>(i.CheckIn="check-in",i.CheckOut="check-out",i.TempCheckOut="temp-check-out",i))(I||{});var M=class extends x.Model{};M.init({id:{type:x.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},type:{type:x.DataTypes.ENUM(...Object.values(I)),allowNull:!1},employee_id:{type:x.DataTypes.INTEGER,allowNull:!1}},{timestamps:!0,sequelize:b,paranoid:!0});var h=M;var E=require("sequelize");var P=class extends E.Model{};P.init({id:{type:E.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},name:{type:E.DataTypes.STRING,allowNull:!1},description:{type:E.DataTypes.STRING,allowNull:!0}},{timestamps:!0,sequelize:b,paranoid:!0});var u=P;var f=require("sequelize");var q=class extends f.Model{};q.init({id:{type:f.DataTypes.INTEGER,autoIncrement:!0,primaryKey:!0},first_name:{type:f.DataTypes.STRING,allowNull:!1},last_name:{type:f.DataTypes.STRING,allowNull:!1},user_id:{type:f.DataTypes.STRING,unique:!0},email:{type:f.DataTypes.TEXT,unique:!0},company_id:{type:f.DataTypes.INTEGER,allowNull:!1}},{timestamps:!0,sequelize:b,paranoid:!0});var g=q;var oe=d.APP_ENV!="dev",Pe=()=>{console.log("Syncronizing the Database"),h.belongsTo(g,{foreignKey:"employee_id",as:"employee"}),g.belongsTo(u,{foreignKey:"company_id",as:"company"}),h.sync({force:oe}),g.sync({force:oe}),u.sync({force:oe})},de=Pe;var k=require("discord.js");var ye=require("discord.js"),p=class{constructor({name:e,description:r,options:i}){this.data=new ye.SlashCommandBuilder().setName(e).setDescription(r),i&&i.forEach(o=>{switch(o.type){case"string":this.data.addStringOption(n=>n.setName(o.name).setDescription(o.description).setRequired(o.required??!1));break;case"boolean":this.data.addBooleanOption(n=>n.setName(o.name).setDescription(o.description).setRequired(o.required??!1));break;case"channel":this.data.addChannelOption(n=>n.setName(o.name).setDescription(o.description).setRequired(o.required??!1));break;case"integer":this.data.addIntegerOption(n=>n.setName(o.name).setDescription(o.description).setRequired(o.required??!1));break;default:throw new Error(`Unsupported option type: ${o}`)}})}};var ie=require("sequelize");var T=async t=>h.create(t),C=async t=>await h.findOne({where:{employee_id:t},order:[["createdAt","DESC"]]}),fe=async t=>h.findAll({where:{createdAt:{[ie.Op.gte]:t}}}),ge=async(t,e)=>await h.findAll({where:{employee_id:t,...e&&{createdAt:{[ie.Op.gte]:e}}}});var _=require("discord.js"),we=require("process");var he=async t=>g.create(t),D=async t=>await g.findOne({where:{user_id:t}}),Ce=async t=>await u.findOne({where:{id:t.company_id}});var $="HR Staff";var qe=t=>/^([01]?[0-9]|2[0-3]):([0-5]?[0-9])$/.test(t),S=async t=>{let e=await D(t.user.id);return e||(await t.user.send("You need first to register yourself as an employee by executing /remote-register"),await t.reply({content:"You need first to register yourself as an employee by executing /remote-register",ephemeral:!0}),(0,we.exit)()),e},w=async(t,e,r,i)=>{let o=await C(e);return o!=null&&o.type==r?(await t.reply({content:i,ephemeral:!0}),await t.user.send(i),null):!0},L=async t=>{let e=new Date,r=t.options.get("time")?.value;if(r){if(!qe(r))return await t.reply({content:"The 'time' format is incorrect, please write in a HH:mm format. Ex: 18:00",ephemeral:!0}),await t.user.send("The 'time' format is incorrect, please write in a HH:mm format. Ex: 18:00"),null;let[i,o]=r.split(":").map(n=>parseInt(n,10));if(e.setHours(i),e.setMinutes(o),e.getTime()>=new Date().getTime())return await t.reply({content:"You cannot define a time that is in the futuure",ephemeral:!0}),await t.user.send("You cannot define a time that is in the futuure"),null}return{today:e,createdAtString:r}},$e=(t,e)=>!t.isCommand()||!(t.member instanceof _.GuildMember)?!1:t.member.roles.cache.some(r=>r.name===e),G=t=>{if(!t.isCommand()||!(t.member instanceof _.GuildMember))return;if(!($e(t,$)||t.member.permissions.has(_.PermissionsBitField.Flags.Administrator))){t.reply({content:"You cannot execute this function, you do not have permissions ! "});return}};var U=class extends p{constructor(){super({name:"check-in",description:"Register your checkin in the sytem, please first register with /remote-register!",options:[{type:"string",name:"time",description:"Define the time you checked-in in case you forget in format of HH:mm like 18:00",required:!1}]})}async execute(e){if(!e.isChatInputCommand())return;let r=await S(e);if(!r||!await w(e,r.id,"check-in","You are already checked in, please checkout before checking again !"))return;let o=await L(e);if(!o)return;let{today:n,createdAtString:a}=o,m=await C(r.id);if(m&&(m.type=="check-out"||m.type=="temp-check-out")){let l=new Date(m.createdAt);if(n.getTime()<l.getTime()){e.reply({content:"You can't register a checkin before a registered checkout/temporary checkout"});return}}await T({type:"check-in",employee_id:r.get("id"),createdAt:n}),a?await e.reply(`${r.last_name} ${r.first_name} forgot to check-in at ${a} !`):await e.reply(`${r.last_name} ${r.first_name} has just checked in !`)}};var Y=class extends p{constructor(){super({name:"check-out",description:"Register your checkout in the sytem",options:[{type:"string",name:"time",description:"Define the time you checked-out in case you forget in format of HH:mm like 18:00",required:!1}]})}async execute(e){if(!e.isChatInputCommand())return;let r=await S(e);if(!r)return;let i=await w(e,r?.id,"check-out","You are already checked out, please check-in first"),o=await w(e,r?.id,"temp-check-out","You are already checked out temporarily, you need to check-in again to be able to checkout");if(!i||!o)return;let n=await L(e);if(!n)return;let{today:a,createdAtString:m}=n,l=await C(r.id);if(!l){await e.reply({content:"You can't checkout witout being checked-in"});return}if(l&&l.type=="check-in"){let c=new Date(l.createdAt);if(a.getTime()<c.getTime()){e.reply({content:"You can't register a checkout before a registered checkin"});return}}await T({type:"check-out",employee_id:r.get("id"),createdAt:a}),m?await e.reply(`${r.last_name} ${r.first_name} forgot to check-out at ${m} !`):await e.reply(`${r.last_name} ${r.first_name} has just checked out !`)}};var ve=async t=>await Le(t?.name)!=null?null:await u.create(t),Le=async t=>await u.findOne({where:{name:t}});var H=class extends p{constructor(){super({name:"add-company",description:"Add the company you just created ",options:[{type:"string",name:"name",description:"Define the company name",required:!0},{type:"string",name:"description",description:"Describe the company",required:!1}]})}async execute(e){if(!e.isChatInputCommand())return;G(e);let r=e.options.get("name")?.value,i=e.options.get("description")?.value;if(!r){e.reply("You need to define the name of the company you wanna create in the database");return}if(await ve({name:r,description:i})==null){await e.reply({content:"Error: The company already exists",ephemeral:!0});return}else await e.reply({content:`Congratulations ! You just created the company ${r}`,ephemeral:!0})}};var s=require("discord.js");var j=class extends p{constructor(){super({name:"remote-register",description:"Register yourself as an employee"})}async execute(e){if(!e.isChatInputCommand())return;if(await u.count()<1){await e.reply({content:"Erroor: No Company exist, please ask your administrator to create them !",ephemeral:!0});return}let r=await D(e.user.id);if(r!=null){let y=await Ce(r);await e.reply({content:"Error: You already registered as an employee of the company : "+y?.name,ephemeral:!0});return}let i=new s.ModalBuilder().setCustomId("register-modal").setTitle("Registration Form"),o=new s.TextInputBuilder().setCustomId("first_name").setLabel("First Name").setStyle(s.TextInputStyle.Short).setPlaceholder("Enter your first name").setRequired(!0),n=new s.TextInputBuilder().setCustomId("last_name").setLabel("Last Name").setStyle(s.TextInputStyle.Short).setPlaceholder("Enter your last name").setRequired(!0),a=new s.TextInputBuilder().setCustomId("email").setLabel("Email").setStyle(s.TextInputStyle.Short).setPlaceholder("Enter your email").setRequired(!0),m=new s.StringSelectMenuBuilder().setCustomId("option_select").setPlaceholder("Choose an option").addOptions([{label:"Option 1",value:"option_1"},{label:"Option 2",value:"option_2"},{label:"Option 3",value:"option_3"}]),l=new s.ActionRowBuilder().addComponents(o),c=new s.ActionRowBuilder().addComponents(n),A=new s.ActionRowBuilder().addComponents(a);i.addComponents(l,c,A),await e.showModal(i)}};var F=class extends p{constructor(){super({name:"report",description:"Report all the employees working hours",options:[{type:"integer",name:"report-days",description:"Define the number of days that preceeds the command",required:!0},{type:"string",name:"user-id",description:"Define the number user to have all its detailed report",required:!1}]});this.getUserActivities=async r=>{let i=await D(r);return i?await ge(i.id):null}}async execute(r){if(!r.isChatInputCommand())return;G(r);let i=r.options.get("report-days",!0).value,o=r.options.get("user-id")?.value,n=new Date;n.setHours(0,0,0,0),n.setDate(n.getDate()-i);let a=null;if(!o)a=await fe(n);else if(a=await this.getUserActivities(o),a==null){await r.reply({content:"User does not exist",ephemeral:!0});return}if(Object.keys(a).length==0){await r.reply({content:"No activities has been found",ephemeral:!0});return}let m=a.reduce((c,A)=>{let y=A.employee_id;return c[y]||(c[y]=[]),c[y].push({activity_type:A.type,createdAt:A.createdAt}),c},{}),l=Object.entries(m).forEach(async([c,A])=>{let y=0;for(let B=0;B<a.length-1;B++){let se=a[B],re=a[B+1];if(se.type=="check-in"&&(re.type==="check-out"||re.type==="temp-check-out")){let Ee=new Date(se.createdAt),Te=(new Date(re.createdAt).getTime()-Ee.getTime())/(1e3*60*60);y=y+Te}}let ae=await g.findOne({where:{id:c}});await r.reply("The employee "+ae?.last_name+" "+ae?.first_name+" has worked "+y.toFixed(1)+" Hours")})}};var V=class extends p{constructor(){super({name:"temp-check-out",description:"Register your temporary checkout in the sytem"})}async execute(e){if(!e.isChatInputCommand())return;let r=await S(e);if(!r)return;let i=await w(e,r?.id,"check-out","You are  checked out , You cannot temporarily checkout again"),o=await w(e,r?.id,"temp-check-out","You are already checked out temporarily, you cannot temporarily check out again");if(!i||!o)return;let n=await C(r.id);if(!n){await e.reply({content:"You can't temporary checkout witout being checked-in"});return}if(n&&n.type=="check-in"){let a=new Date(n.createdAt)}await T({type:"check-out",employee_id:r.get("id"),createdAt:new Date}),await e.reply(`${r.last_name} ${r.first_name} has just checked out temporarily!`)}};var z={"check-in":new U,"remote-register":new j,"check-out":new Y,"temp-check-out":new V,report:new F,"add-company":new H};var N=require("discord.js");var Ge=Object.values(z).map(t=>t.data.toJSON()),Ue=new N.REST({version:"10"}).setToken(d.DISCORD_TOKEN);async function K({guildId:t}){try{console.log("Started refreshing application (/) commands.");let e=t!=null?N.Routes.applicationGuildCommands(d.DISCORD_CLIENT_ID,t):N.Routes.applicationCommands(d.DISCORD_CLIENT_ID);await Ue.put(e,{body:Ge}),console.log("Successfully reloaded application (/) commands.")}catch(e){console.error(e)}}var v=class{constructor({name:e,once:r=!1}){this.name=e,this.once=r}};var J=class extends v{constructor(){super({name:k.Events.GuildCreate,once:!1})}async execute(e){try{await K({guildId:e.id});let r=await e.roles.create({name:$,mentionable:!1,color:k.Colors.Orange,permissions:[k.PermissionFlagsBits.ViewChannel],reason:"Role created automatically when the bot joined the server, it is the main role that can manage the bot"});console.log(`Role "${r.name}" created in server "${e.name}"`)}catch(r){console.error(`Failed to create role in server "${e.name}":`,r)}}};var Ae=require("discord.js");var W=new Map;var R=class{constructor({customId:e}){this.customId=e}};var X=class extends R{constructor(){super({customId:"register-company-selector"})}async execute(e){if(!e.isStringSelectMenu())return;let r=e,i=W.get(e.user.id),{email:o="Not provided",firstName:n="Not provided",lastName:a="Not provided"}=i||{},m=r.values[0],l=r.component.options.filter(c=>c.value==m)[0].label;he({first_name:n,last_name:a,email:o,company_id:parseInt(m),user_id:e.user.id}),await e.reply(`${a} ${n}, you just been assigned to the company : ${l}`)}};var O=require("discord.js");var Q=class extends R{constructor(){super({customId:"register-modal"})}async execute(e){if(!e.isModalSubmit())return;let r=e.fields.getTextInputValue("email"),i=e.fields.getTextInputValue("first_name"),o=e.fields.getTextInputValue("last_name");W.set(e.user.id,{email:r,firstName:i,lastName:o});let a=(await u.findAll()).map(c=>new O.StringSelectMenuOptionBuilder().setLabel(c.name).setValue(""+c.id)),m=new O.StringSelectMenuBuilder().setCustomId("register-company-selector").setPlaceholder("Select the company your are working on").addOptions(a),l=new O.ActionRowBuilder().addComponents(m);await e.reply({content:"Select the company your are working on",components:[l]})}};var Ie={"register-modal":new Q,"register-company-selector":new X};var Z=class extends v{constructor(){super({name:Ae.Events.InteractionCreate,once:!1})}async execute(e){if(e.isModalSubmit()||e.isButton()||e.isStringSelectMenu()){let i=Ie[e.customId];try{await i.execute(e)}catch(o){console.log("Error",o),e.replied||e.deferred?await e.followUp({content:"There was an error while executing this command!",ephemeral:!0}):await e.reply({content:"There was an error while executing this command!",ephemeral:!0})}}if(!e.isChatInputCommand())return;let r=z[e.commandName];if(!r){console.error(`No command matching ${e.commandName} was found.`);return}try{await r.execute(e)}catch(i){console.error(i),e.replied||e.deferred?await e.followUp({content:"There was an error while executing this command!",ephemeral:!0}):await e.reply({content:"There was an error while executing this command!",ephemeral:!0})}}};var be=require("discord.js");var ee=class extends v{constructor(){super({name:be.Events.ClientReady,once:!0})}async execute(e){console.log(`Ready! Logged in as ${e.user.tag}`),await K({guildId:d.GUILD_ID})}};var xe={readyEvent:new ee,interactionCreateEvent:new Z,guildCreated:new J};de();var ne=new te.Client({intents:[te.GatewayIntentBits.Guilds]}),Ye=Object.values(xe);Ye.forEach(t=>{t.once?ne.once(t.name,e=>t.execute(e)):ne.on(t.name,e=>t.execute(e))});ne.login(d.DISCORD_TOKEN);
